{"version":3,"sources":["Utils.js","components/JumboTron/index.js","components/ProgressBar/index.js","components/ResultsTable/index.js","components/Spinner/index.js","components/UserGuessInput/index.js","redux/weather/actions/actionTypes.js","redux/weather/actions/index.js","App.js","redux/weather/reducers/guessWeatherReducer.js","redux/weather/reducers/index.js","reportWebVitals.js","index.js"],"names":["getRandomCities","arrRndCities","arrFilteredCities","rndNumber","i","Math","floor","random","push","Jumbotron","props","selected_expression","failedGuesses","arrResponses","filter","elem","isCorrect","length","currentCity","className","src","alt","ProgressBar","role","style","width","ResultsTable","map","index","city","userResponse","cityTemperature","Spinner","UserGuessInput","value","temperature","onChange","handleInputChange","onFocus","e","target","type","placeholder","fillerText","id","onClick","handleSubmit","UserSetTemperature","CitySetCurrent","UserUpdateResponses","CitySetWeather","CitySetLoading","SetUserTemperature","payload","actionTypes","SetCurrentCity","UpdateUserResponses","FetchWeatherData","dispatch","SetIsloading","fetch","then","response","ok","Error","status","statusText","json","cityWeatherJSON","SetCityWeather","arrCities","App","useSelector","state","guessWeather","cityWeather","isLoading","useDispatch","resetStoreStateProperties","useEffect","JSON","stringify","temp","main","arrTemp","parseFloat","a","preventDefault","guessWeatherReducer","action","rootReducers","combineReducers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","myStore","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.dc7aa396.chunk.js","sourcesContent":["export const getFlagsData = () => {\n    // src API \"https://countriesnow.space/api/v0.1/countries/flag/images\"\n  fetch(\"flags.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  }).then((response) => {\n    return response.json();\n  });\n};\n\nexport const getRandomCities = () => {\n  const arrRndCities = [\n    \"Managua\",\n    \"Bras√≠lia\",\n    \"Algiers\",\n    \"London\",\n    \"Montevideo\",\n    \"Taiwan\",\n    \"Dubai\",\n    \"Luanda\",\n    \"Buenos Aires\",\n    \"Sydney\",\n    \"Linz\",\n    \"Waterloo\",\n    \"Vienna\",\n    \"Porto Calvo\",\n    \"Tirana\",\n    \"Nassau\",\n    \"Dhaka\",\n    \"Yerevan\",\n    \"Brussels\",\n    \"Hamilton\",\n    \"Sucre\",\n    \"Sarajevo\",\n    \"Rabat\",\n    \"Moscow\",\n    \"Paris\",\n    \"Berlin\",\n    \"Beijing\",\n    \"Taipei\",\n    \"Bangkok\",\n    \"Tunis\",\n    \"Ankara\",\n    \"Kampala\",\n    \"Kiev\",\n    \"Abu Dhabi\",\n    \"Accra\",\n    \"Kuala Lumpur\",\n    \"Monaco\",\n    \"Ulan Bator\",\n    \"Maputo\",\n    \"Windhoek\",\n    \"Yaren\",\n    \"Beijing\",\n    \"Kathmandu\",\n    \"Amsterdam\",\n    \"Islamabad\",\n    \"Ramallah\",\n    \"Lima\",\n    \"Manila\"\n  ];\n\n  let arrFilteredCities = [];\n  let rndNumber = 0;\n  let i = 1;\n  while (i <= 5) {\n    rndNumber = Math.floor(Math.random() * (46 - 0 + 1)) + 0;\n    arrFilteredCities.push(arrRndCities[rndNumber]);\n    i += 1;\n  }\n\n  return arrFilteredCities;\n};\n\n","import React from \"react\";\n\nconst Jumbotron = (props) => {\n  let selected_expression = \"pet/welcome.png\";\n  let failedGuesses = props.arrResponses.filter(\n    (elem) => elem.isCorrect === false\n  ).length;\n\n  if (props.currentCity === 5 && failedGuesses <= 2) {\n    selected_expression = \"pet/happy.png\";\n  } else {\n    // validate the amount of correct guesses the user gets\n    switch (failedGuesses) {\n      case 1: {\n        selected_expression = \"pet/surprised.png\";\n        break;\n      }\n      case 2: {\n        selected_expression = \"pet/sweat.png\";\n        break;\n      }\n      case 3: {\n        selected_expression = \"pet/sad.png\";\n        break;\n      }\n      case 4: {\n        selected_expression = \"pet/cry.png\";\n        break;\n      }\n      default: {\n        selected_expression = failedGuesses > 2 ? \"pet/cry.png\" : \"pet/welcome.png\";\n        break;\n      }\n    }\n  }\n\n  return (\n    <div className='card bg-dark text-white mb-3 my-4'>\n      <div className='row g-0'>\n        <div className='col-md-4'>\n          <img\n            src={selected_expression}\n            className='img-fluid rounded-start my-2'\n            alt={props.currentCity}\n          />\n        </div>\n        <div className='col-md-8'>\n          <div className='card-body'>\n            <h5 className='card-title display-6 text-warning text-uppercase text-start'>\n              Guess The Weather Game\n            </h5>\n            <p className='card-text fs-5 col-11 my-4 text-start'>\n              Hello pals, I am the weather Jiraffe. In this game, 5 cities will be displayed in the screen one by one.\n              your mission, if you decide to take it, will be to guess the\n              current weather in each of these cities you're are being presented with. If you assert in at least\n              3 of them, with a deviation of 5 grades maxs, you shall certainly win, otherwise you lose. Are you\n              ready for this quest, champion?\n            </p>\n            {props.currentCity === 5 && (\n              <div className='row text-start text-uppercase'>\n                {failedGuesses < 3 ? (\n                  <h1 className='text-success'>You've won, Congrats!</h1>\n                ) : (\n                  <h1 className='text-danger'>You just lose, pal!</h1>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Jumbotron;\n","import React from \"react\";\nconst ProgressBar = ({currentCity}) => {\n  return (\n    <div className='progress'>\n    <div\n      className='progress-bar progress-bar-striped progress-bar-animated'\n      role='progressbar'\n      aria-valuenow='75'\n      aria-valuemin='0'\n      aria-valuemax='100'\n      style={{ width: currentCity * 20 + \"%\" }}\n    ></div>\n  </div>\n  );\n};\n\nexport default ProgressBar;","const ResultsTable = ({arrResponses}) => {\n  return (\n<div>\n<ul className='list-group list-group-numbered'>\n  {arrResponses.map(\n    ({ city, userResponse, cityTemperature,isCorrect }, index) => {\n      return (\n        <li\n          className='list-group-item d-flex justify-content-between align-items-start'\n          key={index}\n        >\n          <div className='ms-2 me-auto text-muted'>\n            <div className='fw-bold text-dark'>{city}</div>\n            <span\n              className={isCorrect\n                  ? \"text-primary small ms-3\"\n                  : \"text-danger small ms-3 text-decoration-line-through\"\n              }\n            >\n              Your Guess: {userResponse}¬∞C\n            </span>\n          </div>\n          <span className='badge bg-dark p-3 w-25'>{cityTemperature} ¬∞C</span>\n        </li>\n      );\n    }\n  )}\n</ul>\n</div>\n  );\n};\n\nexport default ResultsTable;","import React from \"react\";\nconst Spinner = () => {\n  return (\n    <div className='spinner-border text-primary my-3' role='status'>\n      <span className='visually-hidden'>Loading...</span>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\nconst UserGuessInput = (props) => {\n  return (\n    <div className='input-group mb-3'>\n    <input\n      value={props.temperature || \"\"}\n      onChange={props.handleInputChange}\n      onFocus={(e) => e.target.value = \"\"}\n      type='text'\n      placeholder={props.fillerText}\n      className='form-control'\n      aria-label={props.placeholder}\n      aria-describedby='button-addon2'\n    />\n    <button\n      className='btn btn-outline-secondary'\n      type='button'\n      id='button-addon2'\n      onClick={props.handleSubmit}\n    > Submit\n    </button>\n  </div>\n  );\n};\n\nexport default UserGuessInput;","export const UserSetTemperature = \"user/setTemperature\";\nexport const CitySetCurrent = \"city/setCurrent\";\nexport const UserUpdateResponses = \"user/updateResponses\";\nexport const CitySetWeather = \"city/setWeather\";\nexport const CitySetLoading = \"city/setLoading\";\n","import * as actionTypes from \"./actionTypes\";\n\nexport const SetUserTemperature = (payload) => {\n  return {\n    type: actionTypes.UserSetTemperature,\n    payload,\n  };\n};\n\nexport const SetCurrentCity = (payload) => {\n  return {\n    type: actionTypes.CitySetCurrent,\n    payload,\n  };\n};\n\nexport const UpdateUserResponses = (payload) => {\n  return {\n    type: actionTypes.UserUpdateResponses,\n    payload,\n  };\n};\n\nexport const FetchWeatherData = (city) => (dispatch)=> {\n  dispatch(SetIsloading(true));\n  return fetch(\n    \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n      city +\n      \"&units=metric&appid=\" +\n      process.env.REACT_APP_API_KEY\n  )\n    .then((response) => {\n      if (response.ok) {\n        return response;\n      } else {\n        throw new Error(response.status + response.statusText);\n      }\n    })\n    .then((response) => response.json())\n    .then((cityWeatherJSON) => dispatch(SetCityWeather(cityWeatherJSON)));\n};\n\n// pure function to mutate the state through the reducer\nexport const SetCityWeather = (payload) => {\n  return {\n    type: actionTypes.CitySetWeather,\n    payload,\n  };\n};\n\n\nexport const SetIsloading = (payload) => {\n  return {\n    type: actionTypes.CitySetLoading,\n    payload,\n  };\n};","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRandomCities } from \"./Utils\";\nimport \"./App.css\";\nimport Jumbotron from \"./components/JumboTron\";\nimport ProgressBar from \"./components/ProgressBar/index\";\nimport ResultsTable from \"./components/ResultsTable/index.js\";\nimport Spinner from \"./components/Spinner\";\nimport USerGuessInput from \"./components/UserGuessInput\";\nimport {\n  SetUserTemperature,\n  SetCurrentCity,\n  UpdateUserResponses,\n  FetchWeatherData,\n} from \"./redux/weather/actions\";\n  // Get all five random cities\n  let arrCities = getRandomCities();\n\nconst App = () => {\n  const temperature = useSelector((state) => state.guessWeather.temperature);\n  const currentCity = useSelector((state) => state.guessWeather.currentCity);\n  const arrResponses = useSelector((state) => state.guessWeather.arrResponses);\n  const cityWeather = useSelector((state) => state.guessWeather.cityWeather);\n  const isLoading = useSelector((state) => state.guessWeather.isLoading);\n\n  const dispatch = useDispatch();\n\n  const resetStoreStateProperties = () => {\n    dispatch(SetUserTemperature(0));\n    dispatch(UpdateUserResponses([]));\n    dispatch(SetCurrentCity(0));\n    arrCities = [];\n    arrCities = getRandomCities();\n  };\n\n  const handleInputChange = (e) => {\n    dispatch(SetUserTemperature(e.target.value));\n  };\n\n  useEffect(() => {\n    if (JSON.stringify(cityWeather) === \"{}\") return;\n    const { main } = cityWeather;\n    const { temp } = main;\n    const arrTemp = [\n      ...arrResponses,\n      {\n        city: arrCities[currentCity],\n        userResponse: temperature,\n        isCorrect:\n          parseFloat(temperature) >= temp &&\n          parseFloat(temperature) <= temp + 5,\n        cityTemperature: temp,\n      },\n    ];\n\n    dispatch(UpdateUserResponses(arrTemp));\n    dispatch(SetUserTemperature(0));\n    dispatch(SetCurrentCity(currentCity + 1));\n    // eslint-disable-next-line\n  }, [cityWeather]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (currentCity < 5) {\n      dispatch(FetchWeatherData(arrCities[currentCity]));\n    } else {\n      resetStoreStateProperties();\n    }\n  };\n\n  return (\n    <div className='App container'>\n      <div className='row'>\n        <Jumbotron currentCity={currentCity} arrResponses={arrResponses} />\n        {currentCity !== 5 && (\n          <>\n            {isLoading ? (\n              <Spinner />\n            ) : (\n              <div className='row my-2 text-uppercase justify-content-start h4'>\n                <div className='col-auto text-dark'>Current City:</div>\n                <div className='col-auto text-secondary'>\n                  {arrCities[currentCity] || \"All cities have been displayed\"}\n                </div>\n              </div>\n            )}\n            <USerGuessInput\n              temperature={temperature}\n              fillerText={\"Type in your best guess\"}\n              currentCity={currentCity}\n              handleInputChange={handleInputChange}\n              handleSubmit={handleSubmit}\n            />\n          </>\n        )}\n      </div>\n      <div className='row my-2'>\n        <ProgressBar currentCity={currentCity} />\n      </div>\n      <div className='row'>\n        <ResultsTable arrResponses={arrResponses} />\n      </div>\n      <div className='row my-3 justify-content-center'>\n        {currentCity >= 5 && (\n          <button\n            className='btn btn-success text-uppercase'\n            type='button'\n            id='button-addon2'\n            onClick={resetStoreStateProperties}\n          >\n            Play Again\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import * as actionTypes from \"../actions/actionTypes\";\n\nconst guessWeatherReducer = (\n  state = {\n    temperature: 0,\n    currentCity: 0,\n    arrResponses: [],\n    cityWeather: {},\n    isLoading : false\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.UserSetTemperature:\n      return {\n        ...state,\n        temperature: action.payload,\n      };\n\n    case actionTypes.CitySetCurrent:\n      return {\n        ...state,\n        currentCity: action.payload,\n      };\n    case actionTypes.UserUpdateResponses:\n      return {\n        ...state,\n        arrResponses: action.payload,\n      };\n\n    case actionTypes.CitySetWeather:\n      return {\n        ...state,\n        cityWeather: action.payload,\n        isLoading: false\n      };\n\n      case actionTypes.CitySetLoading:\n        return {\n          ...state,\n          isLoading: action.payload,\n        };\n\n    default:\n      return state;\n  }\n};\n\nexport default guessWeatherReducer;\n","import guessWeatherReducer from './guessWeatherReducer';\n\nimport {combineReducers} from 'redux';\n\nconst rootReducers = combineReducers({\n    guessWeather: guessWeatherReducer,\n});\nexport default rootReducers;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore, applyMiddleware} from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk';\nimport rootReducer from \"./redux/weather/reducers\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst myStore = createStore(rootReducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}